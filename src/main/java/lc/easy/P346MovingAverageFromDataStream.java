package lc.easy;

import org.junit.Assert;

public class P346MovingAverageFromDataStream {

  class MovingAverage {
    int n, p, arr[];
    double sum;

    /** Initialize your data structure here. */
    public MovingAverage(int size) {
      this.n = size;
      this.p = 0;
      this.arr = new int[size];
      this.sum = 0.0;
    }

    public double next(int val) {
      sum += val - arr[p % n];
      arr[p % n] = val;
      return sum / Math.min(n, ++p);
    }
  }

  public void run() {
    MovingAverage ma = new MovingAverage(3);
    Assert.assertEquals(1, ma.next(1), 0.01);
    Assert.assertEquals(5.5, ma.next(10), 0.01);
    Assert.assertEquals((double) 14 / (double) 3, ma.next(3), 0.01);
    Assert.assertEquals(6, ma.next(5), 0.01);

    int[] input = {23637, -11625, -5615, -32455, -4011, -2940, -9682, 21676, -26616, 17045, 25362,
        -29570, -15360, -32552, 17348, 11362, 822, -25697, -29180, 16630, 30227, 1483, 29470, 14410,
        -26439, -17137, 12798, 30882, 16298, -30495, 11481, -32419, -2946, -9264, -13300, 21715,
        22524, 11045, 4417, -15042, 8045, -31304, 21742, -17831, -29418, -10879, 16123, -18726,
        19135, 713, -2752, -28381, 2820, -32150, -25995, -28554, -22725, -934, -11983, 3360, 30530,
        -11762, 21171, 25964, 20898, 469, -15350, 1398, -21969, -17686, 24260, -13108, 14043, 17426,
        23885, 26660, -2828, -9470, 13214, 23249, -17781, 16086, 29081, 4686, 6411, 19428, -17740,
        -23564, -22063, -3570, 15530, 27195, 12369, 4861, -16436, 20578, -30233, 7350, -12937,
        -26468};

    double[] expected = {23637.0, 6006.0, 2132.33333, -6514.5, -6013.8, -5501.5, -6098.71429,
        -2626.875, -5292.33333, -3058.6, -474.90909, -2899.5, -3858.0, -5907.57143, -4357.2,
        -3374.75, -3127.88235, -4381.72222, -5686.89474, -4571.05, -4241.55, -3586.15, -1831.9,
        511.35, -610.05, -1319.9, -195.9, 264.4, 2410.1, 33.1, -660.95, -803.4, -182.7, 981.7,
        -550.7, -33.05, 1052.05, 2889.15, 4569.0, 2985.4, 1876.3, 236.95, -149.45, -1761.5,
        -1910.45, -1597.55, -1431.3, -3911.7, -3769.85, -2209.45, -2921.1, -2719.2, -2430.9,
        -3575.2, -4209.95, -6723.4, -8985.85, -9584.8, -10404.8, -9484.7, -8360.45, -7383.35,
        -7411.9, -5222.15, -2706.35, -2138.95, -3712.6, -2706.4, -4761.6, -5681.55, -4330.95,
        -3567.3, -3006.15, -527.35, 1966.65, 4727.35, 5722.2, 5295.4, 6555.25, 7549.7, 5134.15,
        6526.55, 6922.05, 5858.15, 5133.8, 6081.75, 5962.25, 4714.15, 4709.45, 5415.25, 4978.75,
        6993.9, 6910.2, 6281.95, 4265.9, 3961.8, 2591.55, 3432.55, 2125.0, -360.85};

    ma = new MovingAverage(20);

    for (int i = 0; i < input.length; i++) {
      if (i == 19 || i == 39) {
        System.out.println();
      }
      int in = input[i];
      double out = ma.next(in);
      System.out.printf("%d, input: %d, output: %f, expected: %f\n", i, input[i], out, expected[i]);
      Assert.assertEquals(expected[i], out, 0.01);
    }
  }

  public static void main(String[] args) {
    new P346MovingAverageFromDataStream().run();
  }

}
